"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Async = require("../src/async");
const Sync = require("../src/sync");
const async_1 = require("../src/async");
describe("async factories build stuff", () => {
    const childFactory = Async.makeFactory({
        name: "Kid",
        grade: 1,
    });
    const parentFactory = Async.makeFactory({
        name: "Parent",
        birthday: Async.each((i) => Promise.resolve(new Date(`2017/05/${i}`))),
        children: Async.each(() => []),
        spouse: null,
    }, { startingSequenceNumber: 1 });
    it("makes an object from a factory", () => __awaiter(void 0, void 0, void 0, function* () {
        const jimmy = yield childFactory.build({ name: "Jimmy" });
        expect(jimmy.name).toEqual("Jimmy");
        expect(jimmy.grade).toEqual(1);
    }));
    it("makes an object with default field from a factory", () => __awaiter(void 0, void 0, void 0, function* () {
        const jimmy = yield childFactory.build();
        expect(jimmy.name).toEqual("Kid");
        expect(jimmy.grade).toEqual(1);
    }));
    it("makes an object with default field explicitly set to null", () => __awaiter(void 0, void 0, void 0, function* () {
        const anon = yield childFactory.build({ name: null });
        expect(anon.name).toBeNull();
        expect(anon.grade).toEqual(1);
    }));
    it("can make use of sequence #", () => __awaiter(void 0, void 0, void 0, function* () {
        const susan = yield parentFactory.build({ name: "Susan" });
        const edward = yield parentFactory.build({ name: "Edward" });
        expect(susan.birthday.getTime()).toEqual(new Date("2017/05/01").getTime());
        expect(edward.birthday.getTime()).toEqual(new Date("2017/05/02").getTime());
    }));
    it("can handle has many", () => __awaiter(void 0, void 0, void 0, function* () {
        const jimmy = yield childFactory.build({ name: "Jimmy" });
        const alice = yield childFactory.build({ name: "Alice", grade: 3 });
        const susan = yield parentFactory.build({
            name: "Susan",
            children: [jimmy, alice],
        });
        expect(susan.children.map((c) => c.name)).toEqual(["Jimmy", "Alice"]);
    }));
    it("can refer to other factories", () => __awaiter(void 0, void 0, void 0, function* () {
        const parentWithKidsFactory = Async.makeFactory({
            name: "Timothy",
            birthday: Async.each((i) => new Date(`2017/05/${i}`)),
            children: Async.each(() => __awaiter(void 0, void 0, void 0, function* () {
                return [
                    yield childFactory.build({ name: "Bobby" }),
                    yield childFactory.build({ name: "Jane" }),
                ];
            })),
            spouse: null,
        });
        const tim = yield parentWithKidsFactory.build({
            birthday: new Date("2017-02-01"),
        });
        expect(tim.children.map((c) => c.name)).toEqual(["Bobby", "Jane"]);
    }));
    it("can extend existing factories", () => __awaiter(void 0, void 0, void 0, function* () {
        const geniusFactory = childFactory.extend({
            grade: Async.each((i) => {
                return new Promise((res, _rej) => {
                    setTimeout(() => {
                        res((i + 1) * 2);
                    }, 1);
                });
            }),
        });
        const colin = yield geniusFactory.build({ name: "Colin" });
        expect(colin.grade).toEqual(2);
        const albert = yield geniusFactory.build({ name: "Albert" });
        expect(albert.grade).toEqual(4);
    }));
    it("can derive one value based on another value", () => __awaiter(void 0, void 0, void 0, function* () {
        const personFactory = Async.makeFactory({
            firstName: "Jules",
            lastName: "Bond",
            fullName: "",
        }).withDerivation("fullName", (p) => `${p.firstName} ${p.lastName}`);
        //.withDerivation2(['firstName','lastName'],'fullName', (fn, ln) => `${fn} ${ln}`);
        const bond = yield personFactory.build({ firstName: "James" });
        expect(bond.fullName).toEqual("James Bond");
        const bond2 = yield personFactory.build();
        expect(bond2.fullName).toEqual("Jules Bond");
    }));
    it("can build a list of items", () => __awaiter(void 0, void 0, void 0, function* () {
        const children = yield childFactory.buildList(3, { name: "Bruce" });
        expect(children.length).toEqual(3);
        for (let child of children) {
            expect(child.name).toEqual("Bruce");
            expect(child.grade).toEqual(1);
        }
    }));
    it("can combine factories", () => __awaiter(void 0, void 0, void 0, function* () {
        const timeStamps = (0, async_1.makeFactory)({
            createdAt: Async.each(() => __awaiter(void 0, void 0, void 0, function* () { return new Date(); })),
            updatedAt: Async.each(() => __awaiter(void 0, void 0, void 0, function* () { return new Date(); })),
        });
        const softDelete = (0, async_1.makeFactory)({
            isDeleted: false,
        });
        const postFactory = (0, async_1.makeFactory)({
            content: "lorem ipsum",
        })
            .combine(timeStamps)
            .combine(softDelete);
        const userFactory = (0, async_1.makeFactory)({
            email: "test@user.com",
        })
            .combine(timeStamps)
            .combine(softDelete);
        const post = yield postFactory.build({
            content: "yadda yadda yadda",
            isDeleted: true,
        });
        expect(post.createdAt.getTime() - new Date().getTime()).toBeLessThan(100);
        expect(post.isDeleted).toEqual(true);
        const user = yield userFactory.build({
            email: "foo@bar.com",
            createdAt: new Date("2018/01/02"),
        });
        expect(user.createdAt.getTime()).toEqual(new Date("2018/01/02").getTime());
        expect(post.updatedAt.getTime() - new Date().getTime()).toBeLessThan(100);
        expect(user.email).toEqual("foo@bar.com");
    }));
    it("supports nested factories", () => __awaiter(void 0, void 0, void 0, function* () {
        const groceryStoreFactory = Async.makeFactory({
            aisle: {
                name: "Junk Food Aisle",
                typeOfFood: "Junk Food",
                budget: 3000,
                tags: ["a", "b", "c"],
            },
        });
        // Error: Property 'name' is missing in type '{ budget: number; }
        const aStore = yield groceryStoreFactory.build({
            aisle: {
                budget: 9999,
                tags: ["a", "b"],
            },
        });
        expect(aStore.aisle.budget).toEqual(9999);
        expect(aStore.aisle.typeOfFood).toEqual("Junk Food");
        expect(aStore.aisle.tags).toEqual(["a", "b"]);
    }));
    it("can transform type", () => __awaiter(void 0, void 0, void 0, function* () {
        const makeAdult = childFactory.transform((t) => {
            const birthday = `${2018 - t.grade - 25}/05/10`;
            return {
                name: t.name,
                birthday: new Date(birthday),
                spouse: null,
                children: [],
            };
        });
        const susan = yield makeAdult.build({ name: "Susan", grade: 5 });
        expect(susan.birthday.getTime()).toEqual(new Date("1988/05/10").getTime());
        expect(susan.name).toEqual("Susan");
        expect(susan.spouse).toEqual(null);
        expect(susan.children.length).toEqual(0);
    }));
    function saveRecord(t) {
        return new Promise((res) => {
            setTimeout(() => {
                const saved = Object.assign(Object.assign({}, t), { id: Math.random() * 10000 });
                res(saved);
            }, 1);
        });
    }
    it("can model db factories", () => __awaiter(void 0, void 0, void 0, function* () {
        const dbChildFactory = childFactory.transform(saveRecord);
        const savedParentFactory = Async.makeFactory({
            name: "Parent",
            birthday: Async.each((i) => Promise.resolve(new Date(`2017/05/${i}`))),
            children: Async.each(() => []),
            spouse: null,
        });
        const dbParentFactory = savedParentFactory.transform(saveRecord);
        const familyFactory = savedParentFactory
            .extend({
            name: "Ted",
            children: Promise.all([
                yield dbChildFactory.build({ name: "Billy" }),
                yield dbChildFactory.build({ name: "Amy" }),
            ]),
            spouse: yield dbParentFactory.build({ name: "Susan" }),
        })
            .transform(saveRecord);
        const ted = yield familyFactory.build({ birthday: new Date("1980/09/23") });
        expect(ted.id).toBeGreaterThan(0);
        expect(ted.birthday.getTime()).toEqual(new Date("1980/09/23").getTime());
        expect(ted.name).toEqual("Ted");
        expect(ted.spouse.id).toBeGreaterThan(0);
        expect(ted.spouse.name).toEqual("Susan");
        expect(ted.spouse.id).toBeGreaterThan(0);
        expect(ted.children[0].name).toEqual("Billy");
        expect(ted.children[1].name).toEqual("Amy");
    }));
    it("can create async factories from sync builders", () => __awaiter(void 0, void 0, void 0, function* () {
        const parentFactory = Async.makeFactoryFromSync({
            name: "Parent",
            birthday: Sync.each((i) => new Date(`2017/05/${i}`)),
            children: Sync.each(() => []),
            spouse: null,
        }, { startingSequenceNumber: 1 });
        const susan = yield parentFactory.build({ name: "Susan" });
        expect(susan.name).toEqual("Susan");
        expect(susan.birthday.getTime()).toEqual(new Date("2017/05/01").getTime());
    }));
    it("seq num works as expected", () => __awaiter(void 0, void 0, void 0, function* () {
        const factoryA = Async.makeFactory({
            foo: Async.each((n) => n),
            bar: "hello",
        });
        const a = yield factoryA.buildList(3);
        expect(a[0].foo).toEqual(0);
        expect(a[1].foo).toEqual(1);
        expect(a[2].foo).toEqual(2);
    }));
    it("allows custom seq num start", () => __awaiter(void 0, void 0, void 0, function* () {
        const factoryA = Async.makeFactory({
            foo: Async.each((n) => n + 1),
            bar: "hello",
        }, { startingSequenceNumber: 3 });
        const a = yield factoryA.build();
        expect(a.foo).toEqual(4);
    }));
    it("Can reset sequence number back to config default i.e. 0", () => __awaiter(void 0, void 0, void 0, function* () {
        const widgetFactory = Async.makeFactory({
            name: "Widget",
            id: Async.each((i) => i),
        });
        const widgets = yield widgetFactory.buildList(3);
        expect(widgets[2].id).toBe(2);
        widgetFactory.resetSequenceNumber();
        const moreWidgets = yield widgetFactory.buildList(3);
        expect(moreWidgets[2].id).toBe(2);
    }));
    it("Can reset sequence number back to non-config default", () => __awaiter(void 0, void 0, void 0, function* () {
        const widgetFactory = Async.makeFactory({
            name: "Widget",
            id: Async.each((i) => i),
        }, {
            startingSequenceNumber: 100,
        });
        const widgets = yield widgetFactory.buildList(3);
        expect(widgets[2].id).toBe(102);
        widgetFactory.resetSequenceNumber();
        const moreWidgets = yield widgetFactory.buildList(3);
        expect(moreWidgets[2].id).toBe(102);
    }));
    it("Can reset sequence number to an arbitrary value", () => __awaiter(void 0, void 0, void 0, function* () {
        const widgetFactory = Async.makeFactory({
            name: "Widget",
            id: Async.each((i) => i),
        });
        const widgets = yield widgetFactory.buildList(3);
        expect(widgets[2].id).toBe(2);
        widgetFactory.resetSequenceNumber(5);
        const moreWidgets = yield widgetFactory.buildList(3);
        expect(moreWidgets[0].id).toBe(5);
    }));
    it("clones deeply nested values", () => __awaiter(void 0, void 0, void 0, function* () {
        const factoryA = Async.makeFactory({
            bar: {
                baz: "should-be-immutable",
            },
        });
        const a = yield factoryA.build();
        const b = yield factoryA.build();
        a.bar.baz = "is-not-immutable";
        expect(b.bar.baz).toEqual("should-be-immutable");
    }));
    describe("required fields", () => {
        function makeFactoryA() {
            return Async.makeFactoryWithRequired({
                name: "hello",
            }).transform((t) => (Object.assign(Object.assign({}, t), { name: t.name + t.name, id: t.name.length })));
        }
        it("supports build", () => __awaiter(void 0, void 0, void 0, function* () {
            const factoryA = makeFactoryA();
            // compile failures
            //const z = await factoryA.build();
            //const z = await factoryA.build({ });
            //const z = await factoryA.build({ name: "uhoh" });
            // data checks
            const a = yield factoryA.build({ foreignId: "fk1" });
            expect(a).toEqual({ name: "hellohello", foreignId: "fk1", id: 5 });
            const b = yield factoryA.build({ foreignId: "fk2", name: "goodbye" });
            expect(b).toEqual({ name: "goodbyegoodbye", foreignId: "fk2", id: 7 });
        }));
        it("supports buildList", () => __awaiter(void 0, void 0, void 0, function* () {
            const factoryA = makeFactoryA();
            // compile failures
            //const [y,z] = await factoryA.buildList(5);
            //const [y,z] = await factoryA.buildList(5, {});
            //const [y,z] = await factoryA.buildList(5, { name: 'hello' });
            // data checks
            const [c, d] = yield factoryA.buildList(2, { foreignId: "fk3" });
            expect(c).toEqual({ name: "hellohello", id: 5, foreignId: "fk3" });
            expect(d).toEqual({ name: "hellohello", id: 5, foreignId: "fk3" });
        }));
        it("supports build from sync", () => __awaiter(void 0, void 0, void 0, function* () {
            const factoryA = Sync.makeFactoryWithRequired({
                name: "hello",
            });
            const factoryAPrime = Async.makeFactoryFromSync(factoryA.builder).transform((v) => ({
                fk: v.foreignId,
                name: v.name.toUpperCase(),
            }));
            // compile failures
            //const z = await factoryAPrime.build();
            //const z = await factoryAPrime.build({});
            //const z = await factoryAPrime.build({ name: "hi" });
            const a = yield factoryAPrime.build({ foreignId: "fk" });
            expect(a).toEqual({ fk: "fk", name: "HELLO" });
            // compile failures
            //const [y,z] = await factoryAPrime.buildList(5);
            //const [y,z] = await factoryAPrime.buildList(5, {});
            //const [y,z] = await factoryAPrime.buildList(5, { name: 'hello' });
            const [b, c] = yield factoryAPrime.buildList(5, { foreignId: "fkmany" });
            expect(b).toEqual({ name: "HELLO", fk: "fkmany" });
            expect(c).toEqual({ name: "HELLO", fk: "fkmany" });
        }));
    });
    it("stops RecPartial at unknown (will fail to compile with null value otherwise)", () => __awaiter(void 0, void 0, void 0, function* () {
        const dataFactory = Async.makeFactoryWithRequired({
            id: Async.each((i) => i.toString()),
            description: "lorem ipsum",
        });
        const instanceOfData = yield dataFactory.build({
            id: "1",
            payload: null,
        });
        expect(instanceOfData.payload).toEqual({ foo: "bar" });
    }));
});
//# sourceMappingURL=data:application/json;base64,