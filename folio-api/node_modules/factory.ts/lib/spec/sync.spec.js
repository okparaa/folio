"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Sync = require("../src/sync");
describe("factories build stuff", () => {
    const childFactory = Sync.makeFactory({
        name: "Kid",
        grade: 1,
    });
    const parentFactory = Sync.makeFactory({
        name: "Parent",
        birthday: Sync.each((i) => new Date(`2017/05/${i + 1}`)),
        children: Sync.each(() => []),
        spouse: null,
    });
    it("makes an object from a factory", () => {
        const jimmy = childFactory.build({ name: "Jimmy" });
        expect(jimmy.name).toEqual("Jimmy");
        expect(jimmy.grade).toEqual(1);
    });
    it("makes an object with default field from a factory", () => {
        const jimmy = childFactory.build();
        expect(jimmy.name).toEqual("Kid");
        expect(jimmy.grade).toEqual(1);
    });
    it("makes an object with default field explicitly set to null", () => {
        const anon = childFactory.build({ name: null });
        expect(anon.name).toBeNull();
        expect(anon.grade).toEqual(1);
    });
    it("can make use of sequence #", () => {
        const susan = parentFactory.build({ name: "Susan" });
        const edward = parentFactory.build({ name: "Edward" });
        expect(susan.birthday.getTime()).toEqual(new Date("2017/05/01").getTime());
        expect(edward.birthday.getTime()).toEqual(new Date("2017/05/02").getTime());
    });
    it("can handle has many", () => {
        const jimmy = childFactory.build({ name: "Jimmy" });
        const alice = childFactory.build({ name: "Alice", grade: 3 });
        const susan = parentFactory.build({
            name: "Susan",
            children: [jimmy, alice],
        });
        expect(susan.children.map((c) => c.name)).toEqual(["Jimmy", "Alice"]);
    });
    it("can refer to other factories", () => {
        const parentWithKidsFactory = Sync.makeFactory({
            name: "Timothy",
            birthday: Sync.each((i) => new Date(`2017/05/${i}`)),
            children: Sync.each(() => [
                childFactory.build({ name: "Bobby" }),
                childFactory.build({ name: "Jane" }),
            ]),
            spouse: null,
        });
        const tim = parentWithKidsFactory.build({
            birthday: new Date("2017-02-01"),
        });
        expect(tim.children.map((c) => c.name)).toEqual(["Bobby", "Jane"]);
    });
    it("can extend existing factories", () => {
        const geniusFactory = childFactory.extend({
            grade: Sync.each((i) => (i + 1) * 2),
        });
        const colin = geniusFactory.build({ name: "Colin" });
        expect(colin.grade).toEqual(2);
        const albert = geniusFactory.build({ name: "Albert" });
        expect(albert.grade).toEqual(4);
    });
    it("can derive one value based on another value", () => {
        const personFactory = Sync.makeFactory({
            firstName: "Double-O",
            lastName: Sync.each(() => "Bond"),
            fullName: "",
        }).withDerivation("fullName", (p) => `${p.firstName} ${p.lastName}`);
        //.withDerivation2(['firstName','lastName'],'fullName', (fn, ln) => `${fn} ${ln}`);
        const bond = personFactory.build({ firstName: "James" });
        expect(bond.fullName).toEqual("James Bond");
        const doubleO = personFactory.build();
        expect(doubleO.fullName).toEqual("Double-O Bond");
    });
    it("can build a list of items", () => {
        const children = childFactory.buildList(3, { name: "Bruce" });
        expect(children.length).toEqual(3);
        for (let child of children) {
            expect(child.name).toEqual("Bruce");
            expect(child.grade).toEqual(1);
        }
    });
    it("can combine factories", () => {
        const timeStamps = Sync.makeFactory({
            createdAt: Sync.each(() => new Date()),
            updatedAt: Sync.each(() => new Date()),
        });
        const softDelete = Sync.makeFactory({
            isDeleted: false,
        });
        const postFactory = Sync.makeFactory({
            content: "lorem ipsum",
        })
            .combine(timeStamps)
            .combine(softDelete);
        const userFactory = Sync.makeFactory({
            email: "test@user.com",
        })
            .combine(timeStamps)
            .combine(softDelete);
        const post = postFactory.build({
            content: "yadda yadda yadda",
            isDeleted: true,
        });
        expect(post.createdAt.getTime() - new Date().getTime()).toBeLessThan(100);
        expect(post.isDeleted).toEqual(true);
        const user = userFactory.build({
            email: "foo@bar.com",
            createdAt: new Date("2018/01/02"),
        });
        expect(user.createdAt.getTime()).toEqual(new Date("2018/01/02").getTime());
        expect(post.updatedAt.getTime() - new Date().getTime()).toBeLessThan(100);
        expect(user.email).toEqual("foo@bar.com");
    });
    it("supports nested factories", () => {
        const groceryStoreFactory = Sync.makeFactory({
            aisle: {
                name: "Junk Food Aisle",
                typeOfFood: "Junk Food",
                tags: ["a", "b", "c"],
            },
        });
        // Error: Property 'name' is missing in type '{ budget: number; }
        const aStore = groceryStoreFactory.build({
            aisle: {
                budget: 9999,
                tags: ["a", "b"],
            },
        });
        expect(aStore.aisle.budget).toEqual(9999);
        expect(aStore.aisle.typeOfFood).toEqual("Junk Food");
        expect(aStore.aisle.tags).toEqual(["a", "b"]);
    });
    it("supports recursive factories", () => {
        const factoryA = Sync.makeFactory({
            foo: Sync.each((n) => n),
            bar: "hello",
            recur: null,
        });
        const factoryAPrime = factoryA
            .withDerivation("foo", (_v, n) => {
            // inner: factoryA.build().foo should be 0, n should be 1
            // outer: factoryA.build().foo should be 1, n should be 2
            const foo = factoryA.build().foo;
            return foo * 100 + n; // 001 : 102
        })
            .withDerivation("bar", (v, n) => {
            // inner: n should be 2, v.foo should be 001 -> "001:1"
            // outer: n should be 3, v.foo should be 102 -> "102:2"
            return v.foo + ":" + n;
        });
        const justA = factoryAPrime.build({ foo: 99 }); // seq 1
        expect(justA.foo).toEqual(99);
        const aWithA = factoryAPrime.build({
            // outer: starts on seq 3
            recur: factoryAPrime.build(), // inner: starts on seq 2
        });
        expect(aWithA.foo).toEqual(102);
        expect(aWithA.bar).toEqual("102:2");
        expect(aWithA.recur.foo).toEqual(1);
        expect(aWithA.recur.bar).toEqual("1:1");
    });
    it("allows custom seq num start", () => {
        const factoryA = Sync.makeFactory({
            foo: Sync.each((n) => n + 1),
            bar: "hello",
        }, { startingSequenceNumber: 3 });
        const a = factoryA.build();
        expect(a.foo).toEqual(4);
    });
    it("Can reset sequence number back to non-config default i.e. 0", () => {
        const widgetFactory = Sync.makeFactory({
            name: "Widget",
            id: Sync.each((i) => i),
        });
        const widgets = widgetFactory.buildList(3);
        expect(widgets.map((w) => w.id)).toEqual([0, 1, 2]);
        widgetFactory.resetSequenceNumber();
        const moreWidgets = widgetFactory.buildList(3);
        expect(moreWidgets.map((w) => w.id)).toEqual([0, 1, 2]);
    });
    it("Can reset sequence number back to config default", () => {
        const widgetFactory = Sync.makeFactory({
            name: "Widget",
            id: Sync.each((i) => i),
        }, {
            startingSequenceNumber: 100,
        });
        const widgets = widgetFactory.buildList(3);
        expect(widgets[2].id).toBe(102);
        widgetFactory.resetSequenceNumber();
        const moreWidgets = widgetFactory.buildList(3);
        expect(moreWidgets[2].id).toBe(102);
    });
    it("Can reset sequence number to an arbitrary value", () => {
        const widgetFactory = Sync.makeFactory({
            name: "Widget",
            id: Sync.each((i) => i),
        });
        const widgets = widgetFactory.buildList(3);
        expect(widgets[2].id).toBe(2);
        widgetFactory.resetSequenceNumber(5);
        const moreWidgets = widgetFactory.buildList(3);
        expect(moreWidgets[0].id).toBe(5);
    });
    it("clones deeply nested values", () => {
        const factoryA = Sync.makeFactory({
            bar: {
                baz: "should-be-immutable",
            },
        });
        const a = factoryA.build();
        const b = factoryA.build();
        a.bar.baz = "is-not-immutable";
        expect(b.bar.baz).toEqual("should-be-immutable");
    });
    it("supports required fields", () => {
        const factoryA = Sync.makeFactoryWithRequired({
            name: "hello",
        });
        // compile failures
        //const z = factoryA.build();
        //const z = factoryA.build({ });
        //const z = factoryA.build({ name: "uhoh" });
        // data checks
        const a = factoryA.build({ foreignId: "fk1" });
        expect(a).toEqual({ name: "hello", foreignId: "fk1" });
        const b = factoryA.build({ foreignId: "fk2", name: "goodbye" });
        expect(b).toEqual({ name: "goodbye", foreignId: "fk2" });
        // more compile failures
        //const [y,z] = factoryA.buildList(5);
        //const [y,z] = factoryA.buildList(5, {});
        //const [y,z] = factoryA.buildList(5, { name: 'hello' });
        // data checks
        const [c, d] = factoryA.buildList(2, { foreignId: "fk3" });
        expect(c).toEqual({ name: "hello", foreignId: "fk3" });
        expect(d).toEqual({ name: "hello", foreignId: "fk3" });
    });
    it("can build item using BuilderFactory", () => {
        const widgetFactory = Sync.makeFactory(() => ({
            name: "Widget",
            id: Sync.each((i) => i + 1),
        }));
        const widget = widgetFactory.build({
            name: "New widget",
        });
        expect(widget).toStrictEqual({
            name: "New widget",
            id: 1,
        });
    });
    it("can extend factory with BuilderFactory", () => {
        const widgetFactory = Sync.makeFactory(() => ({
            name: "Widget",
            id: Sync.each((i) => i + 1),
        }));
        const newWidgetFactory = widgetFactory.extend({
            name: "Extended widget",
        });
        const widget = newWidgetFactory.build({
            name: "New widget",
        });
        expect(widget).toStrictEqual({
            name: "New widget",
            id: 1,
        });
    });
    it("can combine factories with BuilderFactory", () => {
        const timeStamps = Sync.makeFactory(() => ({
            createdAt: Sync.each(() => new Date()),
            updatedAt: Sync.each(() => new Date()),
        }));
        const softDelete = Sync.makeFactory(() => ({
            isDeleted: false,
        }));
        const postFactory = Sync.makeFactory(() => ({
            content: "lorem ipsum",
        }))
            .combine(timeStamps)
            .combine(softDelete);
        const userFactory = Sync.makeFactory({
            email: "test@user.com",
        })
            .combine(timeStamps)
            .combine(softDelete);
        const post = postFactory.build({
            content: "yadda yadda yadda",
            isDeleted: true,
        });
        expect(post.createdAt.getTime() - new Date().getTime()).toBeLessThan(100);
        expect(post.isDeleted).toEqual(true);
        const user = userFactory.build({
            email: "foo@bar.com",
            createdAt: new Date("2018/01/02"),
        });
        expect(user.createdAt.getTime()).toEqual(new Date("2018/01/02").getTime());
        expect(post.updatedAt.getTime() - new Date().getTime()).toBeLessThan(100);
        expect(user.email).toEqual("foo@bar.com");
    });
    it("stops RecPartial at unknown (will fail to compile with null value otherwise)", () => {
        const dataFactory = Sync.makeFactoryWithRequired({
            id: Sync.each((i) => i.toString()),
            description: "lorem ipsum",
        });
        const instanceOfData = dataFactory.build({
            id: "1",
            payload: null,
        });
        expect(instanceOfData.payload).toEqual({ foo: "bar" });
    });
});
//# sourceMappingURL=data:application/json;base64,